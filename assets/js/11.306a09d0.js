(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{285:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"什么是ioc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是ioc"}},[a._v("#")]),a._v(" 什么是IOC")]),a._v(" "),t("p",[a._v("简单的说:")]),a._v(" "),t("blockquote",[t("p",[a._v("IOC就是构建和管理依赖的容器")])]),a._v(" "),t("p",[a._v("咱们暂且放下控制反转这个拗口的词。")]),a._v(" "),t("h1",{attrs:{id:"没有ioc的年代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#没有ioc的年代"}},[a._v("#")]),a._v(" 没有IOC的年代")]),a._v(" "),t("p",[a._v("在IOC诞生之前,我们是如何写业务代码的呢? 如下面所示:")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n当然上述是一段伪代码。\n\n")])])]),t("h3",{attrs:{id:"维护的困局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#维护的困局"}},[a._v("#")]),a._v(" 维护的困局")]),a._v(" "),t("p",[a._v("代码能按业务拆分成多个不同的类已经是不错的写法了,但是到了要增加逻辑的时候就麻烦了。")]),a._v(" "),t("p",[a._v("你得对A或者B进行修改,这样维护起来还是不够优雅的。")]),a._v(" "),t("p",[a._v("于是你对此进行了一些设计:")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AImpl")]),a._v(" implents "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// todo")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n        \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 传入对应的实现    ")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("这样在需要新增逻辑的时候只要写一个新的实现类就行了,不必回去修改AImpl了。")]),a._v(" "),t("h3",{attrs:{id:"依赖处理的困局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖处理的困局"}},[a._v("#")]),a._v(" 依赖处理的困局")]),a._v(" "),t("p",[a._v("到这一步我们发现B对A存在依赖,这个依赖由外部传入,也就是说新增逻辑我们必须得修改传入依赖的地方。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n这里可能就会修改为"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("p",[a._v("上面暴露了2个比较明显的问题：")]),a._v(" "),t("ol",[t("li",[a._v("每次调整都可能会修改依赖  => 依赖的管理问题")]),a._v(" "),t("li",[a._v("每次都是new一个依赖进去,非常浪费内存  => 依赖的构建问题")])]),a._v(" "),t("p",[a._v("这时,你能设计出一个办法处理这种问题吗?")]),a._v(" "),t("h1",{attrs:{id:"ioc的诞生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ioc的诞生"}},[a._v("#")]),a._v(" IOC的诞生")]),a._v(" "),t("h3",{attrs:{id:"分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[a._v("#")]),a._v(" 分析")]),a._v(" "),t("p",[a._v("我们一步一步来分析下这2个问题,如果换做是人来处理这些东西会怎么处理呢?")]),a._v(" "),t("p",[a._v("第一步,我们必须得知道哪个类依赖哪个类,也就是说要有一个提供依赖信息的地方。\n第二步,得知依赖信息了,我们就得new个出来给他。")]),a._v(" "),t("p",[a._v("那么我们定义一下这2步,第一步可以称之为依赖信息的获取,第二步可以称之为依赖的管理。")]),a._v(" "),t("h3",{attrs:{id:"如何处理问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何处理问题"}},[a._v("#")]),a._v(" 如何处理问题")]),a._v(" "),t("ul",[t("li",[a._v("依赖信息的获取")])]),a._v(" "),t("ol",[t("li",[a._v("XML配置形式")]),a._v(" "),t("li",[a._v("Java注解方式")]),a._v(" "),t("li",[a._v("其他形式")])]),a._v(" "),t("p",[a._v("信息可以记录在任何地方,任何形式,但我们得找到一个最适应当下的方式。\n聪明的你应该已经想到了,我们先定义一个接口,做成一个策略模式,不同形式的使用不同的加载策略。")]),a._v(" "),t("ul",[t("li",[a._v("依赖的管理")])]),a._v(" "),t("ol",[t("li",[a._v("实例化")]),a._v(" "),t("li",[a._v("依赖处理")]),a._v(" "),t("li",[a._v("其他前置后置处理")])]),a._v(" "),t("p",[a._v("我们可以直接使用反射来进行实例化和依赖处理,当然实例化和依赖处理最好也留好接口。")]),a._v(" "),t("p",[a._v("这里我就不写代码演示了,目的是要大家明白IOC的主要2个功能即:")]),a._v(" "),t("ol",[t("li",[a._v("依赖的构建")]),a._v(" "),t("li",[a._v("依赖的管理")])]),a._v(" "),t("h1",{attrs:{id:"spring提供的ioc容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring提供的ioc容器"}},[a._v("#")]),a._v(" Spring提供的IOC容器")]),a._v(" "),t("p",[a._v("Spring提供了2个IOC容器:")]),a._v(" "),t("ol",[t("li",[a._v("BeanFactory")])]),a._v(" "),t("blockquote",[t("p",[a._v("基础IOC能力,只有Bean的构建和管理")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("ApplicationContext")])]),a._v(" "),t("blockquote",[t("p",[a._v("基于BeanFactory,增加了其他功能")])]),a._v(" "),t("p",[a._v("简而言之,==ApplicationContext==提供了更多的可用可扩展的功能。")]),a._v(" "),t("h3",{attrs:{id:"beanfactory如何管理依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory如何管理依赖"}},[a._v("#")]),a._v(" BeanFactory如何管理依赖")]),a._v(" "),t("p",[a._v("DefaultListableBeanFactory 类是BeanFactory的一个默认实现类,有完整的bean构建管理功能。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DefaultListableBeanFactory")]),a._v(" defaultListableBeanFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DefaultListableBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RootBeanDefinition")]),a._v(" rootBeanDefinition "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RootBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AreaApi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 转为统一的Bean的定义信息类")]),a._v("\n\ndefaultListableBeanFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("registerBeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"A"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("rootBeanDefinition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向容器中注入定义  其实就是添加进一个map里 ")]),a._v("\n\ndefaultListableBeanFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"A"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" beanDefinitionMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConcurrentHashMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("256")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里就是存放所有bean定义的地方 是DefaultListableBeanFactory的一个属性。")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"applicationcontext如何管理依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontext如何管理依赖"}},[a._v("#")]),a._v(" ApplicationContext如何管理依赖")]),a._v(" "),t("p",[t("strong",[a._v("AnnotationConfigApplicationContext")]),a._v(" <= "),t("strong",[a._v("GenericApplicationContext")]),a._v(" <= AbstractApplicationContext <= "),t("strong",[a._v("ApplicationContext")])]),a._v(" "),t("p",[a._v("通过整个继承链来看,最终是实现了ApplicationContext的。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AnnotationConfigApplicationContext")]),a._v(" annotationConfigApplicationContext "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AnnotationConfigApplicationContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ValidatorConfiguration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ValidatorConfiguration")]),a._v(" bean "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" annotationConfigApplicationContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getBean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ValidatorConfiguration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("p",[a._v("其实追寻源码可以看到在==GenericApplicationContext==类中是加载了 ==DefaultListableBeanFactory==")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GenericApplicationContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("customClassLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("refreshed "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AtomicBoolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("beanFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DefaultListableBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 构造方法中 直接 new 了基础IOC容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("整个IOC的流程可以归纳为:")]),a._v(" "),t("blockquote",[t("p",[a._v("获取bean的信息 => 保存起来 => 实例化 => 处理依赖 => 返回实例")])]),a._v(" "),t("p",[a._v("其余功能无非是在这几个流程上加前置或者后置处理。")]),a._v(" "),t("p",[a._v("在最后解释一下控制反转怎么理解:")]),a._v(" "),t("blockquote",[t("p",[a._v("其实就是由人管理依赖也就是new的过程交给了程序,控制权交出去了,也就是控制权反转了。")])]),a._v(" "),t("p",[a._v("spring的源码过于庞大了,如果有兴趣可以自行研究,这里我们只关注Spring最重要的部分就可以了。")]),a._v(" "),t("p",[a._v("看到这里 你悟了吗?")])])}),[],!1,null,null,null);t.default=e.exports}}]);